/*
Copyright (C) 2013-2018 Draios Inc dba Sysdig.

This file is part of sysdig.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

#pragma once

//
// This is the interface of a sinsp source plugin
//
typedef struct sinsp_src_interface
{
	//
	// This is the subset of the source interface that has to do with event
	// capture and is designed to be embedded in the scap library.
	// Methods in this part of the interface include open(), close() and
	// next().
	//
	scap_src_interface scap_src;

	//
	// Initialize the plugin and, if needed, allocate its state.
	// This method is optional.
	//
	src_plugin_t* (*init)(char* config, char *error, int32_t* rc);
	//
	// Destroy the plugin and, if plugin state was allocated, free it.
	// This method is optional.
	//
	void (*destroy)(src_plugin_t* s);
	//
	// Return the unique ID of the plugin. 
	// EVERY PLUGIN MUST OBTAIN AN OFFICIAL ID FROM THE FALCO ORGANIZATION,
	// OTHERWISE IT WON'T PROPERLY WITH OTHER PLUGINS.
	// This method is required.
	//
	uint32_t (*get_id)();

	//
	// Return a text representation of an event generated by this source plugin.
	// The function receives data and datalen produced by scap_src.next().
	// This is used, for example, by sysdig to print a line for the given event.
	// This method is required.
	//
	char* (*event_to_string)(uint8_t* data, uint32_t datalen);

} sinsp_src_interface;

class sinsp_source_plugin
{
public:
	sinsp_source_plugin(sinsp* inspector);
	~sinsp_source_plugin();
	void configure(sinsp_src_interface* plugin_info, char* config);
	uint32_t get_id();

	sinsp_src_interface m_plugin_info;

	sinsp* m_inspector;
	uint32_t m_id;
};
