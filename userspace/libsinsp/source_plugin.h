/*
Copyright (C) 2013-2018 Draios Inc dba Sysdig.

This file is part of sysdig.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

#pragma once

#include "filterchecks.h"

//
// This is the interface of a sinsp source plugin
//
typedef struct sinsp_src_interface
{
	//
	// This is the subset of the source interface that has to do with event
	// capture and is designed to be embedded in the scap library.
	// Methods in this part of the interface include open(), close() and
	// next().
	//
	scap_src_interface scap_src;

	//
	// Initialize the plugin and, if needed, allocate its state.
	// This method is optional.
	//
	src_plugin_t* (*init)(char* config, char *error, int32_t* rc);
	//
	// Destroy the plugin and, if plugin state was allocated, free it.
	// This method is optional.
	//
	void (*destroy)(src_plugin_t* s);
	//
	// Return the unique ID of the plugin. 
	// EVERY PLUGIN MUST OBTAIN AN OFFICIAL ID FROM THE FALCO ORGANIZATION,
	// OTHERWISE IT WON'T PROPERLY WITH OTHER PLUGINS.
	// This method is required.
	//
	uint32_t (*get_id)();
	//
	// Return the name of the plugin, which will be printed when displaying
	// information about the plugin or its events.
	// This method is required.
	//
	char* (*get_name)();
	//
	// Return the list of extractor fields exported by this plugin. Extractor
	// fields can be used in falco rules and sysdig filters.
	// This method returns a string with the list of fields encoded as a json
	// array.
	// This method is required.
	//
	char* (*get_fields)();
	//
	// Return a text representation of an event generated by this source plugin.
	// The function receives data and datalen produced by scap_src.next().
	// This is used, for example, by sysdig to print a line for the given event.
	// This method is required.
	//
	char* (*event_to_string)(uint8_t* data, uint32_t datalen);
	//
	// Extract a.string filter value from an event.
	// - id is the numeric identifier of the field to extract. It corresponds to the
	// position of the field in the array returned by get_fields().
	// - data and datalen contain the event information to be decoded.
	// This method is required.
	//
	char* (*extract_as_string)(uint32_t id, uint8_t* data, uint32_t datalen);

} sinsp_src_interface;

//
// Events in tracers checks
//
class sinsp_filter_check_plugin : public sinsp_filter_check
{
public:
	enum check_type
	{
		TYPE_CNT = 0,
	};

	sinsp_filter_check_plugin();
//	int32_t parse_field_name(const char* str, bool alloc_state, bool needed_for_filtering);
	sinsp_filter_check* allocate_new();
	uint8_t* extract(sinsp_evt *evt, OUT uint32_t* len, bool sanitize_strings = true);

	void set_name(string name);
	void set_fields(filtercheck_field_info* fields, uint32_t nfields);

	uint64_t m_cnt;
	uint32_t m_id;
	sinsp_src_interface* m_source_info;
};

class sinsp_source_plugin
{
public:
	sinsp_source_plugin(sinsp* inspector);
	~sinsp_source_plugin();
	void configure(sinsp_src_interface* plugin_info, char* config);
	uint32_t get_id();

	sinsp_src_interface m_source_info;

private:
	sinsp* m_inspector;
	uint32_t m_id;
	vector<filtercheck_field_info> m_fields;
};
